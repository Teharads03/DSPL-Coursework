# -*- coding: utf-8 -*-
"""random_forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JfOulwAifrniclW6VgZrNhv8C9SGx_yT

Import Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import pickle

"""Load and Prepare the Data"""

df = pd.read_csv("/content/Scaled_Train_data.csv")

"""Define features and target"""

X = df.drop(columns=["cluster_catgeory"])
y = df["cluster_catgeory"]

"""Train-test split"""

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""Train Random Forest"""

rf_model = RandomForestClassifier(
    n_estimators=100,
    max_depth=10,          # Reduce tree depth (prevents overfitting)
    min_samples_split=10,
    min_samples_leaf=5,
    class_weight="balanced",
    random_state=42
)
rf_model.fit(X_train, y_train)

"""Evaluate the Model"""

# Predict on validation set
y_pred = rf_model.predict(X_val)

# Accuracy
print(f"Model Accuracy: {accuracy_score(y_val, y_pred):.4f}")

# Classification report
print("\nClassification Report:\n", classification_report(y_val, y_pred))

# Confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(confusion_matrix(y_val, y_pred), annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

"""Feature Importance Visualization"""

importances = rf_model.feature_importances_
feature_names = X.columns

plt.figure(figsize=(8, 5))
sns.barplot(x=importances, y=feature_names)
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Features")
plt.tight_layout()
plt.show()

"""Predict on Test Dataset"""

test_df = pd.read_csv("/content/Scaled_Test_data.csv")

# Prepare features for prediction
X_test_real = test_df[X.columns]

# Predict cluster category
test_df["cluster_category"] = rf_model.predict(X_test_real)

# Extract required columns
submission_df = test_df[["Customer_ID", "cluster_category"]]

# Save to CSV in the required format
submission_df.to_csv("Random_Forest_Predictions.csv", index=False)
print(" Test predictions saved as 'Random_Forest_Predictions.csv' .")

"""Analyze Test Prediction Results"""

pred_df = pd.read_csv("/content/Random_Forest_Predictions.csv")

# Prediction distribution
print("\nBalanced Predicted Cluster Distribution:")
print(pred_df["cluster_category"].value_counts())

# Visualization
plt.figure(figsize=(8, 5))
sns.countplot(x=pred_df["cluster_category"], palette="viridis")
plt.title("Distribution of Predicted Customer Clusters")
plt.xlabel("cluster_category")
plt.ylabel("Count")
plt.show()

# Show sample predictions
print("\nSample Predictions:")
print(pred_df.head())

# Compute accuracy on training and validation sets
train_accuracy_rf = accuracy_score(y_train, rf_model.predict(X_train))
val_accuracy_rf = accuracy_score(y_val, rf_model.predict(X_val))

print(f"Random Forest Train Accuracy: {train_accuracy_rf:.4f}")
print(f"Random Forest Validation Accuracy: {val_accuracy_rf:.4f}")