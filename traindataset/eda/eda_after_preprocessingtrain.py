# -*- coding: utf-8 -*-
"""EDA_after_preprocessingTrain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H6DBP3swBrwibyMM6CDAFYuhjBfNHmOW
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

processed_data_path = "/content/processed_Train_data.csv"
df_processed = pd.read_csv(processed_data_path)

print("Processed Dataset Preview:")
display(df_processed.head())

# Basic Statistics
print("Processed Data Summary:")
display(df_processed.describe())

"""Univariate Analysis"""

import matplotlib.pyplot as plt
import pandas as pd

# Define sales-related columns
sales_cols = ['luxury_sales', 'fresh_sales', 'dry_sales']
df_processed[sales_cols] = df_processed[sales_cols].apply(pd.to_numeric, errors='coerce')

# Select only numeric columns, excluding 'Customer_ID', 'cluster_category', and 'outlet_city_encoded'
numeric_cols = df_processed.drop(columns=['Customer_ID', 'cluster_catgeory', 'outlet_city_encoded']).select_dtypes(include=['number']).columns

# Plot histograms for selected numeric features
df_processed[numeric_cols].hist(figsize=(12, 8), bins=20)
plt.suptitle("Feature Distributions after Filling Missing Values")
plt.show()

# Count Plot
plt.figure(figsize=(8, 4))
sns.countplot(x=df_processed['outlet_city_encoded'])
plt.title("Count Plot of Outlet City Encoded")
plt.xlabel('Outlet City Encoded')
plt.ylabel('Count')
plt.show()

#Boxplots to Identify Outliers
# Ensure numeric columns
numeric_cols = ['luxury_sales', 'fresh_sales', 'dry_sales']

# Generate Boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(data=df_processed[numeric_cols])
plt.title("Boxplot of Numeric Features (Train Data)")
plt.xticks(rotation=45)
plt.show()

# Plot distribution of cluster categories
plt.figure(figsize=(8, 5))
sns.countplot(x=df_processed["cluster_catgeory"], palette="viridis")
plt.title("Distribution of Cluster Categories")
plt.xlabel("Cluster Category")
plt.ylabel("Count")
plt.show()

"""Bivariate Analysis"""

#Scatter Plot (for numerical features vs numerical features)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_processed['luxury_sales'], y=df_processed['fresh_sales'])
plt.title("Scatter Plot: Luxury Sales vs Fresh Sales")
plt.xlabel('Luxury Sales')
plt.ylabel('Fresh Sales')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_processed['luxury_sales'], y=df_processed['dry_sales'])
plt.title("Scatter Plot: Luxury Sales vs Dry Sales")
plt.xlabel('Luxury Sales')
plt.ylabel('Dry Sales')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_processed['dry_sales'], y=df_processed['fresh_sales'])
plt.title("Scatter Plot: dry Sales vs fresh Sales")
plt.xlabel('dry Sales')
plt.ylabel('fresh Sales')
plt.show()

# Melt the dataset to combine all sales columns into one for plotting
melted_df = df_processed.melt(id_vars=['outlet_city_encoded'], value_vars=['luxury_sales', 'fresh_sales', 'dry_sales'],
                              var_name='sales_category', value_name='sales')

# Plot the average of each sales category by encoded outlet city
plt.figure(figsize=(12, 6))
sns.barplot(x="outlet_city_encoded", y="sales", hue="sales_category", data=melted_df, estimator='mean',ci=None)
plt.title("Average Sales by Encoded Outlet City for Each Category")
plt.xticks(rotation=90, fontsize=10)
plt.show()

"""Multivariate Analysis"""

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate correlation matrix
corr_matrix = df_processed[['luxury_sales', 'fresh_sales', 'dry_sales']].corr()

# Create heatmap
plt.figure(figsize=(8, 6))  # Adjust figure size if needed
sns.heatmap(corr_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title("Correlation Heatmap After")
plt.show()

for col in ['luxury_sales', 'fresh_sales', 'dry_sales']:
    plt.figure(figsize=(8,4))
    sns.boxplot(x='cluster_catgeory', y=col, data=df_processed)
    plt.title(f'{col} by Cluster After')
    plt.show()

# Group by cluster and calculate means for sales columns
cluster_summary = df_processed.groupby('cluster_catgeory')[['luxury_sales', 'fresh_sales', 'dry_sales']].mean()

# Round for readability
cluster_summary = cluster_summary.round(2)
print(cluster_summary)

# Reset index to use cluster as x-axis
cluster_summary_plot = cluster_summary.reset_index().melt(id_vars='cluster_catgeory')

plt.figure(figsize=(10, 6))
sns.barplot(x='cluster_catgeory', y='value', hue='variable', data=cluster_summary_plot)
plt.title('Average Spending per Category by Cluster')
plt.ylabel('Average Monthly Sales')
plt.xlabel('Cluster Category')
plt.legend(title='Category')
plt.show()