# -*- coding: utf-8 -*-
"""EDA_before_preprocessingTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tuDo-ut7EjroZRvIyFl70KTeWY4WvHW6
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

test_path = "/content/test.csv"
test_df = pd.read_csv(test_path)

print("test Dataset Preview:")
display(test_df.head())

# Basic Statistics
print("test data summary:")
display(test_df.describe())

test_df['outlet_city'].unique()

"""Univariate Analysis"""

# Define sales-related columns
sales_cols = ['luxury_sales', 'fresh_sales', 'dry_sales']
test_df[sales_cols] = test_df[sales_cols].apply(pd.to_numeric, errors='coerce')

numeric_cols = test_df.drop(columns=['Customer_ID']).select_dtypes(include=['number']).columns

# Plot histograms for selected numeric features
test_df[numeric_cols].hist(figsize=(12, 8), bins=20)
plt.suptitle("Feature Distributions Before Filling Missing Values")
plt.show()

# Count Plots for Categorical Variables
categorical_columns = test_df.select_dtypes(include=["object"]).columns
for col in categorical_columns:
    plt.figure(figsize=(8, 4))
    sns.countplot(y=test_df[col], order=test_df[col].value_counts().index)
    plt.title(f"Count Plot of {col}")
    plt.show()

#Boxplots to Identify Outliers
# Ensure numeric columns
numeric_cols = ['luxury_sales', 'fresh_sales', 'dry_sales']

# Generate Boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(data=test_df[numeric_cols])
plt.title("Boxplot of Numeric Features (Test Data)")
plt.xticks(rotation=45)
plt.show()

"""Bivariate Analysis"""

#Scatter Plot (for numerical features vs numerical features)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=test_df['luxury_sales'], y=test_df['fresh_sales'])
plt.title("Scatter Plot: Luxury Sales vs Fresh Sales(before)")
plt.xlabel('Luxury Sales')
plt.ylabel('Fresh Sales')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=test_df['luxury_sales'], y=test_df['dry_sales'])
plt.title("Scatter Plot: Luxury Sales vs Dry Sales(before)")
plt.xlabel('Luxury Sales')
plt.ylabel('Dry Sales')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x=test_df['dry_sales'], y=test_df['fresh_sales'])
plt.title("Scatter Plot: dry Sales vs fresh Sales(before)")
plt.xlabel('dry Sales')
plt.ylabel('fresh Sales')
plt.show()

#Barplot
# Melt the dataset to combine all sales columns into one for plotting
melted_df = test_df.melt(id_vars=['outlet_city'], value_vars=['luxury_sales', 'fresh_sales', 'dry_sales'],
                          var_name='sales_category', value_name='sales')

# Plot the average of each sales category by outlet city
plt.figure(figsize=(12, 6))
sns.barplot(x="outlet_city", y="sales", hue="sales_category", data=melted_df, estimator='mean',ci=None)
plt.title("Average Sales by Outlet City for Each Category")
plt.xticks(rotation=90, fontsize=10)
plt.show()

# Calculate correlation matrix
corr_matrix = test_df[['luxury_sales', 'fresh_sales', 'dry_sales']].corr()

# Create heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

for col in ['luxury_sales', 'fresh_sales', 'dry_sales']:
    plt.figure(figsize=(8, 5))
    sns.boxplot(x='outlet_city', y=col, data=test_df)
    plt.title(f'{col} by Outlet City before')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()